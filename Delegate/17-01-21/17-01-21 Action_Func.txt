1.Delegate "Action" - это общий тип делегата (как генерик), кот подходит для всех делегатов типа VOID и к-во принимаемых ими
  параметров от 0 до 10:
	1) Action - говорит, что тип принимаемой делегатом ф-ции он VOID и эта ф-ция НЕ ПРИНИМАЕТ параметров;
	2) ACTION <int, float ... до 10 параметров> - говорит,что тип принимаемой делегатом ф-ции он VOID и эта ф-ция  ПРИНИМАЕТ 
		то к-во и тип параметров, кот указано в угольных скобках;
	3) используя делегат ACTION нет нужды определять делегат как переменную т.е не надо писать:

		public delegate void Function_void_with_int_parameter(int num) --> определяет как переменную
		public void Executor (Function_void_with_int_parameter n,int x)
        {
            n(x);
        },
		
		а просто :

		public void Executor(Action<int> n, int x)
        {
            n(x);
        }

	4) ACTION - это делегат, кот не может принимать ф-ции которые возваращают значение.

	Для это цели существует другой тип делегата типа генерик который называется FUNC

2.Delegate "FUNC" - это общий тип делегата (как генерик), кот подходит для всех делегатов возвращающих какое-либо значение и 
  к-во принимаемых имипараметров от 0 до 10:
	1) FUNC< только один параметр> - говорит, что функция,принимаемая делегатом,  НЕ ПРИНИМАЕТ параметров и возвращает значение, тип
		которого указан в угольных скобках;
	2) FUNC <int p1, float,string[] ... int => это тип возвращаемый ф-цией (до 10 параметров)> - говорит,что тип принимаемой делегатом 
		функции - это тип который указан в угольных скобках последним => последний тип - это не тип параметра принимаемого последним 
		данной функцией, а тип, который  возвращается данной фукцией . В выше приведёном примере тип 
		возвращаемый фукцией он INT так как именно этот тип указан последним;
	3) используя делегат FUNC нет нужды определять делегат как переменную (подобно делегату ACTION.Смотреть выше)

3.
4. Преимущества делегатов в том,что используя их посредством лямбды выражений значительно уменьшает объём кода:
    1) Пример 1. Функции  PrintArray (длиная дорога) и RunOnArray + obj.RunOnArray(лямбда выражение)[короткая дорога]:
        public void RunOnArray (Action<int> f, int[] arr)
            {
                    for (int i=0; i<arr.Length;i++)
                    {
                        f(arr[i]);
                    }
            }
            
	void PrintArray()
       [длиная дорога]
        {
            int[] arr = { 1, 3, 5, 7 };
            for (int i = 0; i < arr.Length; i++)
            {
                Console.WriteLine(arr[i]);
            }
        [тоже самое но короткая дорога]
        obj.RunOnArray(_ => Console.WriteLine(_), arr);

        [длиная дорога]   
            for (int i = 0; i < arr.Length; i++)
            {
                Console.WriteLine(arr[i]*2);
            }

        [тоже самое но короткая дорога]
            obj.RunOnArray(_ => Console.WriteLine(_*2), arr);
        }

      2)Пример 2. 
        Функция которая считает сколько членов массива больше 100 
        [длиная дорога]
         int count100 = 0;
            for(int i=0;i<arr.Length; i++)
            {
                if (arr[i]>100)
                {
                    count100++;
                }
            }

            Применим функцию + делегат:
        [короткая дорога]
            public int CountOnArray (Func<int,bool> f,int[]arr)
        {
            int counter = 0;
            for (int i=0; i<arr.Length; i++)
            {
                if (f(arr[i]))
                {
                    counter++;
                }
            }
            return counter;
        }

        +++
           obj.CountOnArray (x => x>100,arr)

        можно так:

         for (int i = 0; i < arr.Length; i++)
            {
                if (arr[i] ==  0)
                {
                    count100++;
                }
            }
        а можно так:

        count100 = obj.CountOnArray(x => x ==0, arr);

        написав такую функцию + делегат мы можем менять условия в делегате и не писать новые строчки кода специфично
        для этого нужного условия!!!!
