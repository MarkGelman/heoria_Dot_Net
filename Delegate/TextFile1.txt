  ----------------------------------------- PROGRAMS.CS -------------------------------------------------------------------
 Event driven development - Loosely coupted -- это метод когда нет связи между классами и Я могу сам решать какой класс когда вступает в действие, создавая или
			отменяя связи взависимости от Event происходящий по ходу выполнения программы.
 Что бы осуществить такие связи (т.е. передачу типа параметров и тип возврата функции)  нужен какой то шаблон, кот будет хранить в себе всё это и при возникно-
 вении определённого события (Event) передаст всё это нужной функции. Такой шаблон называется Delegate.
 1.DELEGATE - это подпись функции,которая описывает фукцию:
   1)Функция с параметром или без;
   2)Если с параметром,то какой тип параметра;
   3)Тип который функция долджна вернуть;
2.Делегат или "подпись функции" нужен для того,чтобы было возможным передавать ф-цию как параметр
3.Передача какой либо функции как параметр другой ф-ции предназначена для того, чтобы передаваемую ф-цию задействовал не пользователь,
	к примеру, а только та фукция,кот получает эту передаваемую ф-цию как параметр;
4.Синтаксис 
		public delegate [тип,который возвращает ф-ция в которую данный шаблон доставляет параметры] - nameOfDelegate (параметры которые принимает ф-цию......);
  Но только определить Delegate (шаблон) недостаточно нужно ещё как-то присвоить ему значение. для этого нужно создать поле данного делегата (объект делегата)
		nameOfDelegate [имя поля];
6.Пример:
	Есть функция 
		public static void PrintHello (stirng name)
		{
			Console.WriteLine ($"Hello{name}");
		}
		  
	Coздадим описывающий её делегат и поле этого делегата
		public delegate void nameDelegate (string name)
		nameDelegate nameField
	Чтобы вызвать данную ф-цию через Delegate сначала нужно её присвоить этому delegate.Для этог нужно использовать соданое нами поле данного делегата :
		nameDelegate nameField = PrintHello
	Чтобы задействовать данную функцию нужно сделать следующее:
		nameField.Invoke("Thamar") --> на консоль будет выведено имя "Thamar"
	Возможен также и другой вариант без использования INVOKE
		nameField("Thamar")
	Оба варианта эдентичны.INVOKE используют чтобы было понятно, что сейчас работает Delegate,а не какая-то ф-ция.
	!!! Нужно использовать форму с INVOKE!!!

7. Можно не только передать Delegate, но и получить его по запросу, к примеру есть две ф-ции (Lesson37 23:00)
	public int Add (int x, int y)
    {
		
	}
8.Перед использованием Delegate всегда нужно сделать проверку на NULL , чтобы убедиться,что DELEGATE он не пуст. Иначе можно получить ошибку!!!
9. Один делегат может содержать внутри себя несколько функций (Multi Cast Delegate)
	nameField = Add;
	nameField += Subtract;
	Будет содержатся две функции. При запуске делегата последовательно будут запущены две данный ф-ции.
10.В .Net всторены несколько типов делегатов для трэда:
	1)public delegate void ThreadStart() - кот не принимает параметров и не возвращает ничего
	2)public delegate void ParameterizedThreadStart(object 0) - кот принимает параметр типа "object", но ничего не возвращает

	 //----------------------------------------17.01.21 ----------------------------------------------------------